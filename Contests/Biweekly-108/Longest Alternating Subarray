You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:

m is greater than 1.
s1 = s0 + 1.
The 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m.
Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.

A subarray is a contiguous non-empty sequence of elements within an array.

// Code 
class Solution {
public:
    int alternatingSubarray(vector<int>& nums) {
        int ans=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            int currlen=1;
            int add=1;
            int next=nums[i];
            for(int j=i+1;j<n;j++)
            {
                next+=add;
                if(next==nums[j])
                {
                    currlen++;
                }
                else break;
                add*=(-1);
            }
            ans=max(ans,currlen);
            
        }
        return ans==1?-1:ans;
    }
};
