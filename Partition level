// You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.

// Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.

// Return a list of integers representing the size of these parts.

class Solution {
public:
    vector<int> partitionLabels(string s) {
        vector<int>last_idx(26);
        vector<int>ans;
        for(int i=0;i<s.size();i++)
        {
            last_idx[s[i]-'a']=i;
        }
        int end=0,start=0;
        for(int i=0;i<s.size();i++)
        {
            end=max(end,last_idx[s[i]-'a']);
            if(i==end)
            {
                ans.push_back(i-start+1);
                start=i+1;
            }
        }
        return ans;
    }
};
